name: Endpoints
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/register
    metadata:
      title: 'Display the user registration view.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: '{"message":"this is the user register form view"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '59'
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/register
    metadata:
      title: 'Handle an incoming user registration request.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      first_name:
        name: first_name
        description: ''
        required: true
        example: aut
        type: string
      last_name:
        name: last_name
        description: ''
        required: true
        example: eligendi
        type: string
      email:
        name: email
        description: ''
        required: true
        example: iste
        type: string
      password:
        name: password
        description: ''
        required: true
        example: qui
        type: string
      password_confirmation:
        name: password_confirmation
        description: ''
        required: true
        example: sed
        type: string
    responses:
      -
        status: 200
        content: "{\r\n    \"message\": \"Successfully created your account, just verify it at your email !\",\r\n    \"user\": {\r\n        \"first_name\": \"mariam\",\r\n        \"last_name\": \"elkhashab\",\r\n        \"email\": \"m@hotmail.com\",\r\n        \"updated_at\": \"2021-08-30T13:28:25.000000Z\",\r\n        \"created_at\": \"2021-08-30T13:28:25.000000Z\",\r\n        \"id\": 25\r\n    },\r\n    \"AccessToken:\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9yZWdpc3RlciIsImlhdCI6MTYzMDMzMDEwNSwiZXhwIjoxNjMwMzMzNzA1LCJuYmYiOjE2MzAzMzAxMDUsImp0aSI6ImFQV1ExUmZyTDJhZXl2RmEiLCJzdWIiOjI1LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.Gb6pauP14JnqtlmZ4-GIrUJJwY34HGqmwGyXTr35zKI\"\r\n}"
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/login
    metadata:
      title: 'Display the user login view.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: '{"message":"this is the user login form page"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '58'
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/login
    metadata:
      title: 'Handle an incoming user login request.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      email:
        name: email
        description: ''
        required: true
        example: beatae
        type: string
      password:
        name: password
        description: ''
        required: true
        example: consequatur
        type: string
      remember:
        name: remember
        description: ''
        required: false
        example: true
        type: boolean
    responses:
      -
        status: 200
        content: "{\r\n    \"message\": \"logged in successfully\",\r\n    \"AccessToken:\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9sb2dpbiIsImlhdCI6MTYzMDMzMDU2NSwiZXhwIjoxNjMwMzM0MTY1LCJuYmYiOjE2MzAzMzA1NjUsImp0aSI6Ik1GQndmSzl3OVM5T1UyWEkiLCJzdWIiOjI1LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.xxpKgqW5NUZ9OXFXy3AHIPw22H_ivI3KOgblbKDAaoc\"\r\n}"
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/forgot-password
    metadata:
      title: 'Display the password reset link request view.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 201
        content: '{"msg":"This is the password reset link request form"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '57'
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/forgot-password
    metadata:
      title: 'Handle an incoming password reset link request.'
      description: |-
        This api handles the form submission
        We will send the password reset link to this user. Once we have attempted
        to send the link, we will examine the response then see the message we
        need to show to the user. Finally, we'll send out a proper response.
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      email:
        name: email
        description: ''
        required: true
        example: est
        type: string
    responses:
      -
        status: 200
        content: |-
          {
           "status",
          "We have emailed your password reset link!"
          }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: 'api/reset-password/{token}'
    metadata:
      title: 'Display the password reset view.'
      description: 'should contain email, new password & password confirmation fields'
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      token:
        name: token
        description: ''
        required: true
        example: maiores
        type: string
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 201
        content: '{"msg":"This is the reset password form"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '56'
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/reset-password
    metadata:
      title: 'Handle an incoming new password request.'
      description: |-
        This api handles the form submission
        Here we will attempt to reset the user's password. If it is successful we
        will update the password on an actual user model and persist it to the
        database. Otherwise we will parse the error and return the response.
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      token:
        name: token
        description: ''
        required: true
        example: veniam
        type: mixed
      emai:
        name: emai
        description: ''
        required: true
        example: placeat
        type: string
      password:
        name: password
        description: ''
        required: true
        example: voluptatem
        type: string
      password_confirmation:
        name: password_confirmation
        description: ''
        required: true
        example: eveniet
        type: string
    responses:
      -
        status: 200
        content: |-
          {
          "msg": "this is the user login form, login with the new password ",
          "0": "status",
          "1": "Your password has been reset!"
          }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/verify-email
    metadata:
      title: 'Display the user email verification prompt.'
      description: ''
      authenticated: true
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: 'api/verify-email/{id}/{hash}'
    metadata:
      title: 'Mark the authenticated user''s email address as verified.'
      description: ''
      authenticated: true
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the verify email.'
        required: true
        example: dolore
        type: string
      hash:
        name: hash
        description: ''
        required: true
        example: qui
        type: string
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "msg": "Successfully verified",
            "0": 201
          }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/email/verification-notification
    metadata:
      title: 'Send a new email verification notification.'
      description: ''
      authenticated: true
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "msg": "verification-link-sent",
          "0": 201
            }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/logout
    metadata:
      title: 'User logout'
      description: 'Destroy an authenticated user session.'
      authenticated: true
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses: []
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/admin/login
    metadata:
      title: 'Display the admin login view.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: '{"message":"this is the admin login form page"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '55'
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/admin/login
    metadata:
      title: 'Handle an incoming admin login request.'
      description: ''
      authenticated: true
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      email:
        name: email
        description: ''
        required: true
        example: totam
        type: string
      password:
        name: password
        description: ''
        required: true
        example: non
        type: string
    responses:
      -
        status: 200
        content: "{\r\n    \"message\": \"logged in successfully\",\r\n    \"AccessToken:\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9hZG1pblwvbG9naW4iLCJpYXQiOjE2MzAzMzE5NTIsImV4cCI6MTYzMDMzNTU1MiwibmJmIjoxNjMwMzMxOTUyLCJqdGkiOiJRQjc0UnNIVjBKaldadG9GIiwic3ViIjoxLCJwcnYiOiJkZjg4M2RiOTdiZDA1ZWY4ZmY4NTA4MmQ2ODZjNDVlODMyZTU5M2E5In0.ASySa0_mm7wqeSdAsAhpWGkuD2_oAafoduHBnh4tsJs\"\r\n}"
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/admin/admins
    metadata:
      title: 'getting all admins in the database'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            {
            "id": "1" ,
            "email":"steve@gmail.com" ,
            "username":"steve" ,
            "superadmin":"1"
            }
            {
            "id": "2" ,
            "email":"sara@gmail.com" ,
            "username":"sara" ,
            "superadmin":"0"
            }
          }
        headers: []
        description: '200, the user is a superadmin'
      -
        status: 401
        content: '{"message":"unauthorized"}'
        headers: []
        description: '401, the user isn''t a superadmin'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: 'api/admin/admins/{id}'
    metadata:
      title: 'getting a certain admin in the database by the id'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the admin'
        required: true
        example: 13
        type: integer
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": "1" ,
            "email":"steve@gmail.com" ,
            "username":"steve" ,
            "superadmin":"1"
            }
        headers: []
        description: '200, the user is a superadmin'
      -
        status: 401
        content: '{"message":"unauthorized"}'
        headers: []
        description: '401, the user isn''t a superadmin'
      -
        status: 404
        content: ''
        headers: []
        description: '404, the admin by the given id is not found'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/admin/register
    metadata:
      title: 'Display the admin registration view.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/admin/register
    metadata:
      title: 'Handle an incoming admin registration request.'
      description: ''
      authenticated: true
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      email:
        name: email
        description: ''
        required: true
        example: suscipit
        type: string
      username:
        name: username
        description: ''
        required: true
        example: quis
        type: string
      password:
        name: password
        description: ''
        required: true
        example: repellendus
        type: string
      password_confirmation:
        name: password_confirmation
        description: ''
        required: true
        example: minus
        type: string
      superadmin:
        name: superadmin
        description: ''
        required: false
        example: false
        type: boolean
    responses:
      -
        status: 200
        content: "{\r\n    \"message\": \"registered successfully\",\r\n    \"AccessToken:\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9hZG1pblwvcmVnaXN0ZXIiLCJpYXQiOjE2MzAzMzE5OTQsImV4cCI6MTYzMDMzNTU5NCwibmJmIjoxNjMwMzMxOTk0LCJqdGkiOiJwMGFQcVpUUlQyYW5rT3RjIiwic3ViIjoyNCwicHJ2IjoiZGY4ODNkYjk3YmQwNWVmOGZmODUwODJkNjg2YzQ1ZTgzMmU1OTNhOSJ9.FuZ92MotjJPJv7ebj15zv4Do1ER0_mwUKXhW8J9mDK8\"\r\n}"
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/admin/logout
    metadata:
      title: 'Admin logout'
      description: 'Destroy an authenticated admin session (logout).'
      authenticated: true
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses: []
    responseFields: []
  -
    httpMethods:
      - POST
    uri: 'api/admin/updateadmin/{id}'
    metadata:
      title: 'updating a certain admin with id from the database'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the admin'
        required: true
        example: 13
        type: integer
    queryParameters: []
    bodyParameters:
      superadmin:
        name: superadmin
        description: ''
        required: false
        example: true
        type: boolean
    responses:
      -
        status: 200
        content: ''
        headers: []
        description: '200, the user is a superadmin'
      -
        status: 401
        content: '{"message":"unauthorized"}'
        headers: []
        description: '401, the user isn''t a superadmin'
      -
        status: 404
        content: ''
        headers: []
        description: '404, the admin by the given id was not found'
      -
        status: 422
        content: ''
        headers: []
        description: '422, The request was well formed but was unable to be followed due to a validation error'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: 'api/admin/removeadmin/{id}'
    metadata:
      title: 'removing a certain admin with id from the database'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the admin'
        required: true
        example: 6
        type: integer
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: ''
        headers: []
        description: '200, the user is a superadmin'
      -
        status: 401
        content: '{"message":"unauthorized"}'
        headers: []
        description: '401, the user isn''t a superadmin'
      -
        status: 404
        content: ''
        headers: []
        description: '404, the admin with the given id was not found'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/admin/addcategory
    metadata:
      title: 'adding category to the database'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      category_name:
        name: category_name
        description: 'string and must be unique'
        required: false
        example: et
        type: required
    responses:
      -
        status: 200
        content: ''
        headers: []
        description: '200, the user is an admin and the inputs are satisfied with the validation rules'
      -
        status: 401
        content: '{"message":"unauthorized"}'
        headers: []
        description: '401, the user isn''t an admin'
      -
        status: 422
        content: ''
        headers: []
        description: '422, The request was well formed but was unable to be followed due to a validation error'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: 'api/admin/removecategory/{id}'
    metadata:
      title: 'removing a certain category with id from the database'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the category'
        required: true
        example: 18
        type: integer
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: ''
        headers: []
        description: '200, the user is an admin'
      -
        status: 401
        content: '{"message":"unauthorized"}'
        headers: []
        description: '401, the user isn''t an admin'
      -
        status: 404
        content: ''
        headers: []
        description: '404, the category with the given id is not found'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: 'api/admin/updatecategory/{id}'
    metadata:
      title: 'updating a certain category with id in the database'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the category'
        required: true
        example: 15
        type: integer
    queryParameters: []
    bodyParameters:
      category_name:
        name: category_name
        description: 'and must be unique'
        required: false
        example: maiores
        type: string
    responses:
      -
        status: 200
        content: ''
        headers: []
        description: '200, the user is an admin and the inputs are satisfied with the validation rules'
      -
        status: 401
        content: '{"message":"unauthorized"}'
        headers: []
        description: '401, the user isn''t an admin'
      -
        status: 404
        content: ''
        headers: []
        description: '404, the category with the given id was not found'
      -
        status: 422
        content: ''
        headers: []
        description: '422, The request was well formed but was unable to be followed due to a validation error'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/admin/additem
    metadata:
      title: 'adding item to the database'
      description: ''
      authenticated: false
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      item_name:
        name: item_name
        description: 'and must be unique with 40 chrachters at maximum'
        required: true
        example: ipsum
        type: string
      category_id:
        name: category_id
        description: 'and it must exist'
        required: true
        example: 12
        type: integer
      price:
        name: price
        description: ''
        required: true
        example: natus
        type: decimal
      offer:
        name: offer
        description: 'if there was an offer_end_date'
        required: true
        example: tempora
        type: decimal
      offer_end_date:
        name: offer_end_date
        description: 'if there was an offer'
        required: true
        example: deleniti
        type: datetime
      file_path:
        name: file_path
        description: ''
        required: false
        example: null
        type: file
    responses:
      -
        status: 200
        content: ''
        headers: []
        description: '200, the user is an admin and the inputs are satisfied with the validation rules'
      -
        status: 401
        content: '{"message":"unauthorized"}'
        headers: []
        description: '401, the user isn''t an admin'
      -
        status: 422
        content: ''
        headers: []
        description: '422, The request was well formed but was unable to be followed due to a validation error'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: 'api/admin/removeitem/{id}'
    metadata:
      title: 'removing a certain item with id from the database'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the item'
        required: true
        example: 19
        type: integer
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: ''
        headers: []
        description: '200, the user is an admin'
      -
        status: 401
        content: '{"message":"unauthorized"}'
        headers: []
        description: '401, the user isn''t an admin'
      -
        status: 404
        content: ''
        headers: []
        description: '404, the item with the given id is not found'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: 'api/admin/updateitem/{id}'
    metadata:
      title: 'updating a certain item with id in the database'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the item'
        required: true
        example: 16
        type: integer
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: ''
        headers: []
        description: '200, the user is an admin and the inputs are satisfied with the validation rules'
      -
        status: 401
        content: '{"message":"unauthorized"}'
        headers: []
        description: '401, the user isn''t an admin'
      -
        status: 404
        content: ''
        headers: []
        description: '404, the item with the given id was not found'
      -
        status: 422
        content: ''
        headers: []
        description: '422, The request was well formed but was unable to be followed due to a validation error'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/admin/verify-email
    metadata:
      title: 'Display the admin email verification prompt.'
      description: ''
      authenticated: true
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: 'api/admin/verify-email/{id}/{hash}'
    metadata:
      title: 'Mark the authenticated admin''s email address as verified.'
      description: ''
      authenticated: true
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the verify email.'
        required: true
        example: non
        type: string
      hash:
        name: hash
        description: ''
        required: true
        example: accusantium
        type: string
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/admin/email/verification-notification
    metadata:
      title: 'Send a new email verification notification.'
      description: ''
      authenticated: true
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses: []
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/admin/show
    metadata:
      title: 'getting all orders in database'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          scenario=
          {


           "id": 1,
           "user_id": 1,

          "price": "20.20",
          "type_of_delivery": "Take Away",
          "created_at": null,
          "updated_at": null,
          "rating": "5.00",
          "Feedback": "good"
           },
          {
          "id": 2,
          "user_id": 1,
          "price": "20.20",
          "type_of_delivery": "Take Away",
          "created_at": null,
          "updated_at": null,
          "rating": "5.00",
          "Feedback": "good"

          *},
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/admin/search
    metadata:
      title: 'get all the orders of a specific user'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/admin/total
    metadata:
      title: 'get the total number of orders'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/admin/piechart
    metadata:
      title: ''
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/admin/sort
    metadata:
      title: 'get the 4 most selling item'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/admin/add
    metadata:
      title: 'Invoke the controller method.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/admin/add
    metadata:
      title: 'create a new table with the state'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      table:
        name: table
        description: 'string required The state of the table to which the table will be added'
        required: false
        example: voluptatibus
        type: state
    responses: []
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/admin/list
    metadata:
      title: 'shows all the tables with their state'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: 'api/admin/update/{id}'
    metadata:
      title: 'select the wanted table to change it''s state'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the selected table'
        required: true
        example: 12
        type: integer
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/admin/update
    metadata:
      title: 'update the table state'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'the table'
        required: false
        example: non
        type: of
      state:
        name: state
        description: 'new wanted state to update'
        required: false
        example: debitis
        type: the
    responses: []
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/store
    metadata:
      title: 'Store a newly created resource in storage.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses: []
    responseFields: []
  -
    httpMethods:
      - DELETE
    uri: api/destroy
    metadata:
      title: 'Remove the specified resource from storage.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses: []
    responseFields: []
